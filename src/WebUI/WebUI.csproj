<Project Sdk="Microsoft.NET.Sdk.Web">

    <PropertyGroup>
        <TargetFramework>net7.0</TargetFramework>
        <Nullable>enable</Nullable>
        <IsPackable>true</IsPackable>
        <SpaRoot>ClientApp\</SpaRoot>
        <SpaProxyServerUrl>https://localhost:44447</SpaProxyServerUrl>
        <SpaProxyLaunchCommand>npm start</SpaProxyLaunchCommand>
        <ImplicitUsings>enable</ImplicitUsings>
        <IncludeOpenAPIAnalyzers>true</IncludeOpenAPIAnalyzers>
    </PropertyGroup>

    <ItemGroup>
        <ProjectReference Include="..\Application\Application.csproj" />
        <ProjectReference Include="..\Infrastructure\Infrastructure.csproj" />
    </ItemGroup>

    <ItemGroup>
        <InternalsVisibleTo Include="CleanArchitecture.Application.IntegrationTests" />
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore" Version="7.0.8" />
        <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="7.0.8" />
        <PackageReference Include="Microsoft.AspNetCore.Identity.UI" Version="7.0.8" />
        <PackageReference Include="Microsoft.AspNetCore.SpaProxy" Version="8.0.0-preview.5.23302.2">
            <!-- The SPA Proxy is only used at development time -->
            <Publish>false</Publish>
        </PackageReference>
        <PackageReference Include="Microsoft.EntityFrameworkCore.Relational" Version="7.0.8" />
        <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="7.0.8" />
        <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="7.0.8">
          <PrivateAssets>all</PrivateAssets>
          <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
        <PackageReference Include="Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore" Version="7.0.8" />
        <PackageReference Include="FluentValidation.AspNetCore" Version="11.3.0" />
        <PackageReference Include="NSwag.AspNetCore" Version="13.19.0" />
        <PackageReference Include="ZymLabs.NSwag.FluentValidation.AspNetCore" Version="0.6.2" />
    </ItemGroup>

    <ItemGroup>
        <!-- Don't publish the SPA source files, but do show them in the project files list -->
        <Compile Remove="ClientApp\**" />
        <Content Remove="$(SpaRoot)**" />
        <Content Remove="ClientApp\**" />
        <EmbeddedResource Remove="ClientApp\**" />
        <None Remove="$(SpaRoot)**" />
        <None Remove="ClientApp\**" />
        <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
    </ItemGroup>

    <ItemGroup>
      <None Remove="ClientApp\.editorconfig" />
      <None Remove="ClientApp\.gitignore" />
      <None Remove="ClientApp\angular.json" />
      <None Remove="ClientApp\aspnetcore-https.js" />
      <None Remove="ClientApp\karma.conf.js" />
      <None Remove="ClientApp\package-lock.json" />
      <None Remove="ClientApp\package.json" />
      <None Remove="ClientApp\proxy.conf.js" />
      <None Remove="ClientApp\README.md" />
      <None Remove="ClientApp\src\api-authorization\authorize.interceptor.spec.ts" />
      <None Remove="ClientApp\src\api-authorization\authorize.interceptor.ts" />
      <None Remove="ClientApp\src\app\app.component.html" />
      <None Remove="ClientApp\src\app\app.component.ts" />
      <None Remove="ClientApp\src\app\app.module.ts" />
      <None Remove="ClientApp\src\app\app.server.module.ts" />
      <None Remove="ClientApp\src\app\counter\counter.component.html" />
      <None Remove="ClientApp\src\app\counter\counter.component.spec.ts" />
      <None Remove="ClientApp\src\app\counter\counter.component.ts" />
      <None Remove="ClientApp\src\app\fetch-data\fetch-data.component.html" />
      <None Remove="ClientApp\src\app\fetch-data\fetch-data.component.ts" />
      <None Remove="ClientApp\src\app\home\home.component.html" />
      <None Remove="ClientApp\src\app\home\home.component.ts" />
      <None Remove="ClientApp\src\app\nav-menu\nav-menu.component.html" />
      <None Remove="ClientApp\src\app\nav-menu\nav-menu.component.scss" />
      <None Remove="ClientApp\src\app\nav-menu\nav-menu.component.ts" />
      <None Remove="ClientApp\src\app\todo\todo.component.html" />
      <None Remove="ClientApp\src\app\todo\todo.component.scss" />
      <None Remove="ClientApp\src\app\todo\todo.component.ts" />
      <None Remove="ClientApp\src\app\token\token.component.html" />
      <None Remove="ClientApp\src\app\token\token.component.ts" />
      <None Remove="ClientApp\src\app\web-api-client.ts" />
      <None Remove="ClientApp\src\assets\.gitkeep" />
      <None Remove="ClientApp\src\environments\environment.prod.ts" />
      <None Remove="ClientApp\src\environments\environment.ts" />
      <None Remove="ClientApp\src\index.html" />
      <None Remove="ClientApp\src\main.ts" />
      <None Remove="ClientApp\src\polyfills.ts" />
      <None Remove="ClientApp\src\styles.scss" />
      <None Remove="ClientApp\src\test.ts" />
      <None Remove="ClientApp\tsconfig.app.json" />
      <None Remove="ClientApp\tsconfig.json" />
      <None Remove="ClientApp\tsconfig.spec.json" />
    </ItemGroup>
    
    <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
        <!-- Ensure Node.js is installed -->
        <Exec Command="node --version" ContinueOnError="true">
            <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
        </Exec>
        <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
        <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
    </Target>

    <!-- Auto-generated Open API specification and Angular TypeScript clients -->
    <PropertyGroup>
        <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
    </PropertyGroup>
    
    <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
        <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- --configuration production" />

        <!-- Include the newly-built files in the publish output -->
        <ItemGroup>
            <DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**" />
            <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
                <RelativePath>wwwroot\%(RecursiveDir)%(FileName)%(Extension)</RelativePath>
                <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
                <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
            </ResolvedFileToPublish>
        </ItemGroup>
    </Target>
</Project>
